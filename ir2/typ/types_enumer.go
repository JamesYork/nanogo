// Code generated by "enumer -type=Kind -transform lower -output types_enumer.go"; DO NOT EDIT.

package typ

import (
	"fmt"
	"strings"
)

const _KindName = "invalidbii8i16i32i64uu8u16u32u64uptrf32f64complex64complex128strunsafeptrcbcicrcfccomplexcstrcnilcsrmemblankinterfacestructfuncchanptrslicearraymapnumtypes"

var _KindIndex = [...]uint8{0, 7, 8, 9, 11, 14, 17, 20, 21, 23, 26, 29, 32, 36, 39, 42, 51, 61, 64, 73, 75, 77, 79, 81, 89, 93, 97, 100, 103, 108, 117, 123, 127, 131, 134, 139, 144, 147, 155}

const _KindLowerName = "invalidbii8i16i32i64uu8u16u32u64uptrf32f64complex64complex128strunsafeptrcbcicrcfccomplexcstrcnilcsrmemblankinterfacestructfuncchanptrslicearraymapnumtypes"

func (i Kind) String() string {
	if i >= Kind(len(_KindIndex)-1) {
		return fmt.Sprintf("Kind(%d)", i)
	}
	return _KindName[_KindIndex[i]:_KindIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KindNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[B-(1)]
	_ = x[I-(2)]
	_ = x[I8-(3)]
	_ = x[I16-(4)]
	_ = x[I32-(5)]
	_ = x[I64-(6)]
	_ = x[U-(7)]
	_ = x[U8-(8)]
	_ = x[U16-(9)]
	_ = x[U32-(10)]
	_ = x[U64-(11)]
	_ = x[Uptr-(12)]
	_ = x[F32-(13)]
	_ = x[F64-(14)]
	_ = x[Complex64-(15)]
	_ = x[Complex128-(16)]
	_ = x[Str-(17)]
	_ = x[UnsafePtr-(18)]
	_ = x[CB-(19)]
	_ = x[CI-(20)]
	_ = x[CR-(21)]
	_ = x[CF-(22)]
	_ = x[CComplex-(23)]
	_ = x[CStr-(24)]
	_ = x[CNil-(25)]
	_ = x[CSR-(26)]
	_ = x[Mem-(27)]
	_ = x[Blank-(28)]
	_ = x[Interface-(29)]
	_ = x[Struct-(30)]
	_ = x[Func-(31)]
	_ = x[Chan-(32)]
	_ = x[Ptr-(33)]
	_ = x[Slice-(34)]
	_ = x[Array-(35)]
	_ = x[Map-(36)]
	_ = x[NumTypes-(37)]
}

var _KindValues = []Kind{Invalid, B, I, I8, I16, I32, I64, U, U8, U16, U32, U64, Uptr, F32, F64, Complex64, Complex128, Str, UnsafePtr, CB, CI, CR, CF, CComplex, CStr, CNil, CSR, Mem, Blank, Interface, Struct, Func, Chan, Ptr, Slice, Array, Map, NumTypes}

var _KindNameToValueMap = map[string]Kind{
	_KindName[0:7]:          Invalid,
	_KindLowerName[0:7]:     Invalid,
	_KindName[7:8]:          B,
	_KindLowerName[7:8]:     B,
	_KindName[8:9]:          I,
	_KindLowerName[8:9]:     I,
	_KindName[9:11]:         I8,
	_KindLowerName[9:11]:    I8,
	_KindName[11:14]:        I16,
	_KindLowerName[11:14]:   I16,
	_KindName[14:17]:        I32,
	_KindLowerName[14:17]:   I32,
	_KindName[17:20]:        I64,
	_KindLowerName[17:20]:   I64,
	_KindName[20:21]:        U,
	_KindLowerName[20:21]:   U,
	_KindName[21:23]:        U8,
	_KindLowerName[21:23]:   U8,
	_KindName[23:26]:        U16,
	_KindLowerName[23:26]:   U16,
	_KindName[26:29]:        U32,
	_KindLowerName[26:29]:   U32,
	_KindName[29:32]:        U64,
	_KindLowerName[29:32]:   U64,
	_KindName[32:36]:        Uptr,
	_KindLowerName[32:36]:   Uptr,
	_KindName[36:39]:        F32,
	_KindLowerName[36:39]:   F32,
	_KindName[39:42]:        F64,
	_KindLowerName[39:42]:   F64,
	_KindName[42:51]:        Complex64,
	_KindLowerName[42:51]:   Complex64,
	_KindName[51:61]:        Complex128,
	_KindLowerName[51:61]:   Complex128,
	_KindName[61:64]:        Str,
	_KindLowerName[61:64]:   Str,
	_KindName[64:73]:        UnsafePtr,
	_KindLowerName[64:73]:   UnsafePtr,
	_KindName[73:75]:        CB,
	_KindLowerName[73:75]:   CB,
	_KindName[75:77]:        CI,
	_KindLowerName[75:77]:   CI,
	_KindName[77:79]:        CR,
	_KindLowerName[77:79]:   CR,
	_KindName[79:81]:        CF,
	_KindLowerName[79:81]:   CF,
	_KindName[81:89]:        CComplex,
	_KindLowerName[81:89]:   CComplex,
	_KindName[89:93]:        CStr,
	_KindLowerName[89:93]:   CStr,
	_KindName[93:97]:        CNil,
	_KindLowerName[93:97]:   CNil,
	_KindName[97:100]:       CSR,
	_KindLowerName[97:100]:  CSR,
	_KindName[100:103]:      Mem,
	_KindLowerName[100:103]: Mem,
	_KindName[103:108]:      Blank,
	_KindLowerName[103:108]: Blank,
	_KindName[108:117]:      Interface,
	_KindLowerName[108:117]: Interface,
	_KindName[117:123]:      Struct,
	_KindLowerName[117:123]: Struct,
	_KindName[123:127]:      Func,
	_KindLowerName[123:127]: Func,
	_KindName[127:131]:      Chan,
	_KindLowerName[127:131]: Chan,
	_KindName[131:134]:      Ptr,
	_KindLowerName[131:134]: Ptr,
	_KindName[134:139]:      Slice,
	_KindLowerName[134:139]: Slice,
	_KindName[139:144]:      Array,
	_KindLowerName[139:144]: Array,
	_KindName[144:147]:      Map,
	_KindLowerName[144:147]: Map,
	_KindName[147:155]:      NumTypes,
	_KindLowerName[147:155]: NumTypes,
}

var _KindNames = []string{
	_KindName[0:7],
	_KindName[7:8],
	_KindName[8:9],
	_KindName[9:11],
	_KindName[11:14],
	_KindName[14:17],
	_KindName[17:20],
	_KindName[20:21],
	_KindName[21:23],
	_KindName[23:26],
	_KindName[26:29],
	_KindName[29:32],
	_KindName[32:36],
	_KindName[36:39],
	_KindName[39:42],
	_KindName[42:51],
	_KindName[51:61],
	_KindName[61:64],
	_KindName[64:73],
	_KindName[73:75],
	_KindName[75:77],
	_KindName[77:79],
	_KindName[79:81],
	_KindName[81:89],
	_KindName[89:93],
	_KindName[93:97],
	_KindName[97:100],
	_KindName[100:103],
	_KindName[103:108],
	_KindName[108:117],
	_KindName[117:123],
	_KindName[123:127],
	_KindName[127:131],
	_KindName[131:134],
	_KindName[134:139],
	_KindName[139:144],
	_KindName[144:147],
	_KindName[147:155],
}

// KindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KindString(s string) (Kind, error) {
	if val, ok := _KindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Kind values", s)
}

// KindValues returns all values of the enum
func KindValues() []Kind {
	return _KindValues
}

// KindStrings returns a slice of all String values of the enum
func KindStrings() []string {
	strs := make([]string, len(_KindNames))
	copy(strs, _KindNames)
	return strs
}

// IsAKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Kind) IsAKind() bool {
	for _, v := range _KindValues {
		if i == v {
			return true
		}
	}
	return false
}
